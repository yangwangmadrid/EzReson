# Write Orbitals to a fchk file using the original fchk file
# The original fchk file is generated by standard Gaussian program ...
# by using the keyword 'Fchk=All'. It stores MOs in AO basis.
#
#  Updates:
#
#    Oct 8, 2020:
#    - Fixed a bug encountered when the number of the orbitals to be written 
#    (e.g. RAOs) is not the same as that in the original fchk file
#
#    Jun 3, 2020:
#    - Fixed a bug dealing with the cases where there are multiple lines below
#    the "Full Title" line in the original fchk file
#
#  Created on Feb, 2020
#  Written by Yang Wang (yangwang@yzu.edu.cn)
#

import re
import math

def writeFchkOrb( inFchkFile, outFchkFile, C, E, ifMinInfo=True ):
# Note: both E and C are tuples of orbital enegies and coefficients,
#       respectively
#   For spin-unrestricted calculations, both E and C are tuples:
#     E = (Ea, Eb)
#     C = (Ca, Cb)
#   For spin-restricted calculations, both E and C are np arrays (matrices):
#     E = E
#     C = C
#
# ifMinInfo = True:  Only save minimum information in the output fchk file,
#                    e.g., ignore density matrices
#           = False: Faithfully keep all information from original fchk file to
#                    the output fchk file (except for 'Full Title' and 'Route')

    # IMPORTANT NOTE:
    #   For JMol to read a fchk file, the 'Full Title' and 'Route' sections
    #   must be removed. Otherwise, JMol cannot read correctly the fchk file
    # Hence, we completely ignore these parts in the output fchk file.
    pat_FullTitle = re.compile( 
            '^\s*Full\s+Title\s+\s+C\s+N=\s+\d+.*'
            )
    i_FullTitle = 0
    n_FullTitle = 0

    pat_Route = re.compile( 
            '^\s*Route\s+\s+C\s+N=\s+\d+.*'
            )
    i_Route = 0
    n_Route = 0

    pat_NBas = re.compile( 
            '^\s*Number\s+of\s+basis\s+functions\s+[A-Z]\s+\d+.*'
            )

    pat_NBasIndp = re.compile( 
            '^\s*Number\s+of\s+independent\s+functions\s+[A-Z]\s+\d+.*'
            )

    pat_Ea = re.compile( 
            '^\s*Alpha\s+Orbital\s+Energies\s+[A-Z]\s+[A-Z]+=\s+\d+.*'
            )
    i_Ea = 0

    pat_Eb = re.compile( 
            '^\s*Beta\s+Orbital\s+Energies\s+[A-Z]\s+[A-Z]+=\s+\d+.*'
            )
    i_Eb = 0

    pat_Ca = re.compile( 
            '^\s*Alpha\s+MO\s+coefficients\s+[A-Z]\s+[A-Z]+=\s+\d+.*'
            )
    i_Ca = 0

    pat_Cb = re.compile( 
            '^\s*Beta\s+MO\s+coefficients\s+[A-Z]\s+[A-Z]+=\s+\d+.*'
            )
    i_Cb = 0

    if isinstance( C, tuple ) == 1:
        spin = 1 # spin-unrestricted
        ( Ca, Cb ) = C
        ( Ea, Eb ) = E
    else:
        spin = 0 # spin-restricted
        Ca = C
        Ea = E

    ( NBas, NMOa ) = Ca.shape
    # Check if E and C have the same shape:
    if len(Ea) != NMOa:
        raise ValueError( 'The number of alpha orbital energies (%i) is not '
                'consistent with that of orbital coefficient vectors (%i)'
                % ( len(Ea), NMOa ) )
    if spin == 1:
        ( _, NMOb ) = Cb.shape
        # Check if E and C have the same shape:
        if len(Ea) != NMOb:
            raise ValueError( 'The number of beta orbital energies (%i) is not '
                    'consistent with that of orbital coefficient vectors (%i)'
                    % ( len(Ea), NMOb ) )

    
    skipAlphaOrbEne = False
    skipAlphaOrbCoeff = False
    skipBetaOrbEne = False
    skipBetaOrbCoeff = False

    with open( outFchkFile, 'w' ) as writer:    
        with open( inFchkFile ) as f:
            for line in f:
                # Skip the 'Full Title' section:
                if pat_FullTitle.match( line ):
                    n_FullTitle  = int( (line.split())[-1] )
                    if n_FullTitle  <= 0:
                        raise ValueError( 'Last number of the Full Title line '
                                'is wrong and should be a nonnegative integer' )
                    # Number of lines below for the Full Title:
                    n_FullTitle = math.ceil( n_FullTitle / 5 )
                    i_FullTitle = 1
                    continue
                elif n_FullTitle > 0:
                    if i_FullTitle >= n_FullTitle:
                        n_FullTitle = 0
                    i_FullTitle += 1
                    continue

                # Skip the 'Route' section:
                if pat_Route.match( line ):
                    n_Route = int( (line.split())[-1] )
                    if n_Route <= 0:
                        raise ValueError( 'Last number of the Route line is '
                                'wrong and should be a nonnegative integer' )
                    # Number of lines below for the route info:
                    n_Route = math.ceil( n_Route / 5 )
                    i_Route = 1
                    continue
                elif n_Route > 0:
                    if i_Route >= n_Route:
                        n_Route = 0
                    i_Route += 1
                    continue

                # Check the number of basis functions:
                if pat_NBas.match( line ):
                    NBas0 = int( (line.split())[-1] )
                    if NBas !=NBas0:
                        raise ValueError( 'Number of basis functions in the '
                                'coefficient matrix (%i) is not consistent '
                                'with that in file %s (%i)' % 
                                ( NBas, inFchkFile, NBas0 ) )

                # Write the new number of MOs:
                if pat_NBasIndp.match( line ):
                    writer.write( 'Number of independent functions '
                    '%12s %16i\n' % ( 'I', NMOa ) )
                    continue

                # Write the new number of MOs for 'Alpha Orbital Energies':
                if pat_Ea.match( line ):
                    # Original NMO in the input fchk file, which is necessary
                    # for cases where the number of the output MOs is not
                    # consistent with that of the input MOs:
                    NMOa0 = int( (line.split())[-1] )
                    writer.write( 'Alpha Orbital Energies %21s%5s %11i\n' %
                            ( 'R', 'N=', NMOa ) )
                    # Write the new MO energies:
                    for k in range( 0, NMOa ):
                        writer.write( '%16.8E' % Ea[k] )
                        if k % 5 == 4:
                            writer.write( '\n' )
                    if k % 5 != 4:
                        writer.write( '\n' )
                    skipAlphaOrbEne = True
                    continue
                # Skip the old 'Alpha Orbital Energies' data:
                elif skipAlphaOrbEne:
                    i_Ea += len( line.split() )
                    # Check if completed:
                    if i_Ea == NMOa0:
                        skipAlphaOrbEne = False
                    continue

                # Write the new number of MOs for 'Alpha MO coefficients':
                if pat_Ca.match( line ):
                    writer.write( 'Alpha MO coefficients  %21s%5s %11i\n' %
                            ( 'R', 'N=', NBas*NMOa ) )
                    # Write the new MO coefficients:
                    ndata = 0
                    for k in range( 0, NMOa ):
                        for j in range( 0, NBas ):
                            writer.write( '%16.8E' % Ca[j,k] )
                            ndata += 1
                            if ndata % 5 == 0:
                                writer.write( '\n' )
                    if ndata % 5 != 0:
                        writer.write( '\n' )
                    skipAlphaOrbCoeff = True
                    # Stop if the ifMinInfo option is on:
                    if ifMinInfo and spin == 0:
                        break
                    continue
                # Skip the old 'Alpha MO coefficients' data:
                elif skipAlphaOrbCoeff:
                    i_Ca += len( line.split() )
                    # Check if completed:
                    if i_Ca == NBas*NMOa0:
                        skipAlphaOrbCoeff = False
                    continue

                # Write the new number of MOs for 'Beta Orbital Energies':
                if pat_Eb.match( line ):
                    # Original NMO in the input fchk file, which is necessary
                    # for cases where the number of the output MOs is not
                    # consistent with that of the input MOs:
                    NMOb0 = int( (line.split())[-1] )
                    writer.write( 'Beta Orbital Energies  %21s%5s %11i\n' %
                            ( 'R', 'N=', NMOb ) )
                    # Write the new MO energies:
                    for k in range( 0, NMOb ):
                        writer.write( '%16.8E' % Eb[k] )
                        if k % 5 == 4:
                            writer.write( '\n' )
                    if k % 5 != 4:
                        writer.write( '\n' )
                    skipBetaOrbEne = True
                    continue
                # Skip the old 'Beta Orbital Energies' data:
                elif skipBetaOrbEne:
                    i_Eb += len( line.split() )
                    # Check if completed:
                    if i_Eb == NMOb0:
                        skipBetaOrbEne = False
                    continue

                # Write the new number of MOs for 'Beta MO coefficients':
                if pat_Cb.match( line ):
                    writer.write( 'Beta MO coefficients   %21s%5s %11i\n' %
                            ( 'R', 'N=', NBas*NMOb ) )
                    # Write the new MO coefficients:
                    ndata = 0
                    for k in range( 0, NMOb ):
                        for j in range( 0, NBas ):
                            writer.write( '%16.8E' % Cb[j,k] )
                            ndata += 1
                            if ndata % 5 == 0:
                                writer.write( '\n' )
                    if ndata % 5 != 0:
                        writer.write( '\n' )
                    skipBetaOrbCoeff = True
                    # Stop if the ifMinInfo option is on:
                    if ifMinInfo:
                        break
                    continue
                # Skip the old 'Beta MO coefficients' data:
                elif skipBetaOrbCoeff:
                    i_Cb += len( line.split() )
                    # Check if completed:
                    if i_Cb == NBas*NMOb0:
                        skipBetaOrbCoeff = False
                    continue

                writer.write( line )

#==============================================================================
# enddef writeFchkOrb()
